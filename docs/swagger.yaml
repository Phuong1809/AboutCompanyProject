basePath: /
definitions:
  form.AdressForm:
    properties:
      address_company:
        type: string
      address_specific:
        type: string
      company_id:
        type: integer
    type: object
  form.Company:
    properties:
      name:
        type: string
    type: object
  form.FormLogin:
    properties:
      pass_word:
        type: string
      user_name:
        type: string
    type: object
  models.Address:
    properties:
      address_company:
        type: string
      address_specific:
        type: string
      company:
        $ref: '#/definitions/models.Company'
      company_id:
        type: integer
      id:
        type: integer
      staff:
        items:
          $ref: '#/definitions/models.Staff'
        type: array
    type: object
  models.Company:
    properties:
      address:
        items:
          $ref: '#/definitions/models.Address'
        type: array
      id:
        type: integer
      name:
        type: string
      staff:
        items:
          $ref: '#/definitions/models.Staff'
        type: array
    type: object
  models.QR:
    properties:
      filePatch:
        type: string
      id:
        type: integer
      staff:
        $ref: '#/definitions/models.Staff'
      staffId:
        type: integer
    type: object
  models.Staff:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      address_id:
        type: integer
      company:
        items:
          $ref: '#/definitions/models.Company'
        type: array
      email:
        type: string
      fax:
        type: string
      file_path_avatar:
        type: string
      id:
        type: integer
      mobile_phone:
        type: string
      name_company:
        type: string
      qr:
        items:
          $ref: '#/definitions/models.QR'
        type: array
      role:
        type: string
      staff_name:
        type: string
      tele_phone:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: A book management service API in Go using Gin framework.
  title: Gin Book Service
  version: "1.0"
paths:
  /address/add:
    post:
      consumes:
      - application/json
      description: Add address
      parameters:
      - description: address
        in: body
        name: address
        required: true
        schema:
          $ref: '#/definitions/form.AdressForm'
      produces:
      - application/json
      responses:
        "200":
          description: add address ok
          schema:
            type: string
      summary: Add address
      tags:
      - Address
  /address/all:
    get:
      description: Get all address
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Address'
      summary: return list of all
      tags:
      - Address
  /address/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete address
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: DELETE ADDRESS OK
          schema:
            type: string
      summary: Delete address
      tags:
      - Address
  /company/add:
    post:
      consumes:
      - application/json
      description: Add company
      parameters:
      - description: company
        in: body
        name: company
        required: true
        schema:
          $ref: '#/definitions/form.Company'
      produces:
      - application/json
      responses:
        "200":
          description: add company ok
          schema:
            type: string
      summary: Add company
      tags:
      - Company
  /company/all:
    get:
      description: Get all company
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Company'
      summary: return list of all
      tags:
      - Company
  /company/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete company
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: DELETE OK
          schema:
            type: string
      summary: Delete company
      tags:
      - Company
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/form.FormLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Login
      tags:
      - Authentication
  /staff/{id}:
    get:
      description: Get all staff by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Staff'
      summary: return list of all
      tags:
      - Staff
  /staff/add:
    post:
      consumes:
      - application/json
      description: Add staff
      parameters:
      - description: staff
        in: formData
        name: staff
        required: true
        type: file
      - description: image
        in: formData
        name: image
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: add staff ok
          schema:
            type: string
      summary: Add staff
      tags:
      - Staff
  /staff/all:
    get:
      description: Get all staff
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Staff'
      summary: return list of all
      tags:
      - Staff
  /staff/delete/{id}:
    delete:
      consumes:
      - application/json
      description: Delete staff
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: DELETE OK
          schema:
            type: string
      summary: Delete staff
      tags:
      - Staff
swagger: "2.0"
